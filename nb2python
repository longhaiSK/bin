#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import io # Used in except block

def convert_with_nbconvert(input_path, extra_args):
    """
    Converts an input Jupyter Notebook (.ipynb) file to a Python script (.py)
    using the 'jupyter nbconvert' command-line tool.
    Attempts to pre-load the file into OS cache first.
    Allows passing additional arguments directly to nbconvert.
    Relies on nbconvert to add the .py extension based on '--to script'.
    """
    # --- Input Validation ---
    if not input_path.lower().endswith('.ipynb'):
        print(f"Error: Input file must be a .ipynb file. Received: {input_path}", file=sys.stderr)
        sys.exit(1)

    if not os.path.isfile(input_path):
        print(f"Error: Input file not found: {input_path}", file=sys.stderr)
        sys.exit(1)

    # --- Determine Output Base Name ---
    # We'll pass only the base name to nbconvert's --output flag
    base_name = os.path.splitext(input_path)[0]
    # Define the expected final output path for checking later
    expected_output_path = base_name + '.py'

    # --- Attempt to Pre-load File into OS Cache ---
    try:
        print(f"Attempting to pre-load '{os.path.basename(input_path)}' into OS cache...")
        with open(input_path, 'rb') as f_preload:
            f_preload.read() # Read the whole file
        print("Pre-load attempt finished.")
    except (IOError, OSError) as e:
        print(f"\nWarning: Could not pre-read the input file: {e}", file=sys.stderr)
        print("Conversion will proceed, but might be slower if reading from a cold cache.", file=sys.stderr)
    except Exception as e:
        print(f"\nWarning: An unexpected error occurred during pre-load: {e}", file=sys.stderr)
        print("Conversion will proceed.", file=sys.stderr)
    # --- End of Pre-load Attempt ---


    # --- Construct nbconvert Command ---
    try:
        # Base command
        command = ['jupyter', 'nbconvert']

        # Hardcode the default arguments for tag removal
        default_args = [
            '--TagRemovePreprocessor.enabled=True',
            '--TagRemovePreprocessor.remove_cell_tags=remove'
        ]
        command.extend(default_args)

        # Add any EXTRA arguments passed by the user via the command line
        command.extend(extra_args) # 'extra_args' comes from parse_known_args()

        # Add the CORE conversion arguments
        command.extend([
            input_path,
            '--to', 'script',
            # Pass only the base name to --output. Let nbconvert add the extension.
            '--output', base_name
        ])

        print(f"\nRunning command: {' '.join(command)}") # Show command being run

        # --- Execute nbconvert ---
        result = subprocess.run(command, check=True, capture_output=True, text=True, encoding='utf-8')

        # --- Debugging Output ---
        print("\n--- nbconvert stdout ---")
        print(result.stdout if result.stdout.strip() else "[No stdout]")
        print("--- nbconvert stderr ---")
        print(result.stderr if result.stderr.strip() else "[No stderr]")
        print("--- End nbconvert Output ---")

        # --- Verify File Existence ---
        # Check using the expected full path
        if os.path.isfile(expected_output_path):
            print(f"\nSuccessfully converted '{os.path.basename(input_path)}' to '{os.path.basename(expected_output_path)}'")
        else:
            print(f"\nError: Conversion command finished successfully (exit code 0), but the expected output file '{expected_output_path}' was NOT created!", file=sys.stderr)
            print("Please check the nbconvert output (stderr) above for potential issues or warnings.", file=sys.stderr)
            sys.exit(1) # Exit with an error code

    # --- Error Handling for nbconvert ---
    except FileNotFoundError:
        print("\nError: 'jupyter' command not found.", file=sys.stderr)
        print("Please ensure Jupyter and nbconvert are installed", file=sys.stderr)
        print("and that their installation location is included in your system's PATH.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"\nError during conversion with nbconvert: Command failed with return code {e.returncode}", file=sys.stderr)
        print("\n--- nbconvert stdout (on error) ---")
        print(e.stdout if e.stdout.strip() else "[No stdout]")
        print("--- nbconvert stderr (on error) ---")
        print(e.stderr if e.stderr.strip() else "[No stderr]")
        print("--- End nbconvert Output (on error) ---")
        sys.exit(1)
    except Exception as e:
        print(f"\nAn unexpected error occurred during nbconvert execution: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    # --- Argument Parsing ---
    parser = argparse.ArgumentParser(
        description="Convert Jupyter Notebook (.ipynb) to Python script (.py) using nbconvert, attempting OS cache pre-load and allowing extra passthrough arguments.",
        epilog="Example: python ipynb_to_py_nbconvert.py my_nb.ipynb --no-prompt --log-level=DEBUG"
               "\nAny arguments after the input filename are passed directly to 'jupyter nbconvert'."
    )
    parser.add_argument(
        "input_file",
        help="Path to the input Jupyter Notebook (.ipynb) file."
    )
    args, unknown_args_for_nbconvert = parser.parse_known_args()

    # Pass the primary input file and the list of extra arguments
    convert_with_nbconvert(args.input_file, unknown_args_for_nbconvert)
    