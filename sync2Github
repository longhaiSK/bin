#!/bin/bash

# --- Customize these variables for your project ---
REPO_PATH="~/Github/longhaiSK.github.io"
BRANCH_NAME="main"
# ---------------------------------------------

# --- Color Definitions for visual feedback ---
C_BLUE='\033[0;34m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_NONE='\033[0m' # No Color
# -------------------------------------------

# Navigate to the repository directory.
cd "$(eval echo "$REPO_PATH")" || { echo "ERROR: Repository path not found at $REPO_PATH"; exit 1; }

echo -e "${C_BLUE}--- Starting GitHub Sync: $(TZ='America/Chicago' date) ---${C_NONE}"

# Store the current commit hash to compare against after pulling.
OLD_HEAD=$(git rev-parse HEAD)

# Step 1: Pull remote changes.
echo -e "\n${C_BLUE}1. Pulling remote changes...${C_NONE}"
git pull --rebase --autostash origin "$BRANCH_NAME" || { echo "ERROR: Pull failed. Please resolve conflicts manually."; exit 1; }

# --- SHOW PULLED CHANGES ---
# Compare the commit hash before and after the pull.
NEW_HEAD=$(git rev-parse HEAD)
if [ "$OLD_HEAD" != "$NEW_HEAD" ]; then
    echo -e "${C_GREEN}   ↓ Changes pulled from remote:${C_NONE}"
    # Use git log to show a formatted list of the new commits that were pulled.
    git log --pretty=format:"     %C(yellow)%h%C(reset) - %s %C(cyan)(%an, %ar)%C(reset)" "$OLD_HEAD".."$NEW_HEAD"
else
    echo -e "${C_GREEN}   ✓ Your local branch is up-to-date.${C_NONE}"
fi
# ---------------------------

# Step 2: Stage all new and modified files.
echo -e "\n${C_BLUE}2. Staging all local changes...${C_NONE}"
git add .

# --- SHOW STAGED CHANGES ---
# Use `git diff` to provide a summary of files staged for commit.
if ! git diff --staged --quiet; then
    echo -e "${C_GREEN}   Changes staged for commit:${C_NONE}"
    # The --stat flag provides a concise summary. `sed` is used to indent the output.
    git diff --staged --stat | sed 's/^/    /'
else
    echo -e "${C_GREEN}   ✓ No local changes to stage.${C_NONE}"
fi
# ---------------------------

# Step 3: Commit the changes.
if [ -n "$1" ]; then
  COMMIT_MSG="$1"
else
  COMMIT_MSG="Automated commit on $(TZ='America/Chicago' date)"
fi

# Only attempt to commit if there are actually staged changes.
if ! git diff --staged --quiet; then
    echo -e "\n${C_BLUE}3. Committing with message: \"$COMMIT_MSG\"${C_NONE}"
    git commit -m "$COMMIT_MSG"
else
    echo -e "\n${C_BLUE}3. Nothing to commit.${C_NONE}"
fi

# Step 4: Push your commits to the remote repository.
echo -e "\n${C_BLUE}4. Pushing local commits to origin/$BRANCH_NAME...${C_NONE}"

# --- SHOW PUSHED CHANGES ---
# Check for local commits that don't exist on the remote branch yet.
COMMITS_TO_PUSH=$(git log --pretty=format:"     %C(yellow)%h%C(reset) - %s %C(cyan)(%an, %ar)%C(reset)" origin/"$BRANCH_NAME"..HEAD)

if [ -n "$COMMITS_TO_PUSH" ]; then
    echo -e "${C_GREEN}   ↑ Commits to be pushed:${C_NONE}"
    echo -e "$COMMITS_TO_PUSH"
    git push origin "$BRANCH_NAME"
else
    echo -e "${C_GREEN}   ✓ Repository is already in sync. Nothing to push.${C_NONE}"
fi
# -------------------------

echo -e "\n${C_BLUE}--- Sync complete ---${C_NONE}"