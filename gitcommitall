#!/bin/bash

# --- Configuration ---
# Set a default message format if no argument is provided
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
COMPUTER_NAME=$(hostname)
DEFAULT_COMMIT_MESSAGE="update at ${TIMESTAMP} from ${COMPUTER_NAME}"

# --- Check for Command-Line Argument ---
# Use the first argument ($1) as the commit message if provided.
# Otherwise, use the default message constructed above.
if [ -n "$1" ]; then
  # Use the first argument as the commit message
  # "$@" is used to capture all arguments as a single string, allowing messages with spaces
  COMMIT_MESSAGE="$@"
  echo "Using provided commit message: \"${COMMIT_MESSAGE}\""
else
  # Use the default timestamp/hostname message
  COMMIT_MESSAGE="${DEFAULT_COMMIT_MESSAGE}"
  echo "No message provided, using default: \"${COMMIT_MESSAGE}\""
fi

# --- Execute Git Commit ---
# -a: stage all modified/deleted tracked files
# -m: use the constructed or provided commit message
echo "Running git commit..."
git commit -am "${COMMIT_MESSAGE}"

# --- Report Status ---
status=$?
if [ $status -eq 0 ]; then
  echo "Git commit successful."
else
  echo "Git commit failed with status ${status}."
  # You might see a failure if there are no changes to commit,
  # or if you are not in a git repository, or if the commit fails for other reasons.
fi

exit $status
