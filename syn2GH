#!/usr/bin/env bash

# ===============================================
# Sync ALL git repos under the specified roots
# Usage:
#   bash syn2GH.sh "Your commit message here"
# ===============================================

# ---- Customize these search roots ----
ROOTS=(
  "$HOME/Github"
)
# Exclude heavy/noisy directories (regex for grep -vE)
EXCLUDE_REGEX='(/\.venv/|/node_modules/|/\.cargo/)'
# -------------------------------------

# ---- Colors ----
C_BLUE='\033[0;34m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_RED='\033[0;31m'
C_NONE='\033[0m'
# ----------------

# ---- Commit message ----
if [ -n "$1" ]; then
  COMMIT_MSG="$1"
else
  COMMIT_MSG="Automated commit from $(hostname) on $(TZ='America/Regina' date)"
fi

errors=()

process_repo() {
  local repo_dir="$1"
  echo # Adds a space between repo outputs
  echo -e "${C_BLUE}Repo: ${C_YELLOW}${repo_dir}${C_NONE}"

  cd "$repo_dir" || { echo -e "${C_RED}  ! Cannot enter directory${C_NONE}"; errors+=("$repo_dir: cd failed"); return; }

  # Ensure it's a git repo
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo -e "${C_YELLOW}  ! Not a git repo (skipping)${C_NONE}"
    return
  fi

  # Current branch (skip detached HEAD)
  BRANCH_NAME=$(git symbolic-ref --quiet --short HEAD 2>/dev/null)
  if [ -z "$BRANCH_NAME" ]; then
    echo -e "${C_YELLOW}  ! Detached HEAD (skipping)${C_NONE}"
    return
  fi

  # Ensure 'origin' remote exists
  if ! git remote get-url origin >/dev/null 2>&1; then
    echo -e "${C_YELLOW}  ! No 'origin' remote (skipping)${C_NONE}"
    return
  fi

  # Upstream tracking (silently attempt to set if missing)
  TRACKING_REF=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
  if [ -z "$TRACKING_REF" ]; then
    DEFAULT_REMOTE_BRANCH=$(git remote show origin 2>/dev/null | awk '/HEAD branch/ {print $NF}')
    if [ -n "$DEFAULT_REMOTE_BRANCH" ]; then
      if git branch --set-upstream-to="origin/${DEFAULT_REMOTE_BRANCH}" "$BRANCH_NAME" >/dev/null 2>&1; then
        TRACKING_REF="origin/${DEFAULT_REMOTE_BRANCH}"
      fi
    fi
  fi

  # 1) Pull
  OLD_HEAD=$(git rev-parse HEAD 2>/dev/null)
  git fetch origin >/dev/null 2>&1 || true
  if [ -n "$TRACKING_REF" ]; then
    if ! git pull --rebase --autostash origin "$BRANCH_NAME" >/dev/null 2>&1; then
      echo -e "${C_RED}  ! Pull failed. Resolve conflicts and re-run.${C_NONE}"
      errors+=("$repo_dir: pull failed")
      return
    fi
  fi
  NEW_HEAD=$(git rev-parse HEAD 2>/dev/null)
  if [ "$OLD_HEAD" != "$NEW_HEAD" ]; then
    echo -e "${C_BLUE}1) Pull:${C_GREEN} ↓ Changes pulled:${C_NONE}"
    git log --pretty=format:"      %C(yellow)%h%C(reset) - %s %C(cyan)(%an, %ar)%C(reset)" "$OLD_HEAD".."$NEW_HEAD"
  else
    echo -e "${C_BLUE}1) Pull:${C_GREEN} ✓ Up-to-date with remote.${C_NONE}"
  fi

  # 2) Stage
  git add -A
  if ! git diff --staged --quiet; then
    echo -e "${C_BLUE}2) Stage:${C_GREEN} Staged diff:${C_NONE}"
    # This line is changed to add red color to the diff stat output
    git diff --staged --stat | sed "s/.*/   ${C_RED}&${C_NONE}/"
  else
    echo -e "${C_BLUE}2) Stage:${C_GREEN} ✓ Nothing to stage.${C_NONE}"
  fi

  # 3) Commit
  if ! git diff --staged --quiet; then
    echo -e "${C_BLUE}3) Commit:${C_NONE}"
    if ! git commit -m "$COMMIT_MSG"; then
      echo -e "${C_RED}  ! Commit failed${C_NONE}"
      errors+=("$repo_dir: commit failed")
      return
    fi
  else
    echo -e "${C_BLUE}3) Commit:${C_GREEN} ✓ Nothing to commit.${C_NONE}"
  fi

  # 4) Push
  if [ -n "$TRACKING_REF" ]; then
    TO_PUSH=$(git log --pretty=format:"      %C(yellow)%h%C(reset) - %s %C(cyan)(%an, %ar)%C(reset)" "${TRACKING_REF}"..HEAD 2>/dev/null)
  else
    TO_PUSH=$(git log --pretty=format:"      %C(yellow)%h%C(reset) - %s %C(cyan)(%an, %ar)%C(reset)" "origin/$BRANCH_NAME"..HEAD 2>/dev/null)
  fi

  if [ -n "$TO_PUSH" ]; then
    # Attempt the push and capture all output (stdout & stderr)
    PUSH_OUTPUT=$(git push origin "$BRANCH_NAME" 2>&1)
    
    # Check the exit code of the push command
    if [ $? -ne 0 ]; then
      # Push FAILED: Print context and the captured error output
      echo -e "${C_BLUE}4) Push:${C_RED} ↑ Push FAILED. Details:${C_NONE}"
      echo -e "$TO_PUSH"
      echo -e "${C_RED}--- Git Error Output ---${C_NONE}"
      echo -e "$PUSH_OUTPUT"
      echo -e "${C_RED}------------------------${C_NONE}"
      errors+=("$repo_dir: push failed")
      return
    else
      # Push SUCCEEDED: Print a simple confirmation message
      echo -e "${C_BLUE}4) Push:${C_GREEN} ✓ Pushed successfully.${C_NONE}"
    fi
  else
    # No changes to push, this remains the same
    echo -e "${C_BLUE}4) Push:${C_GREEN} ✓ Already in sync.${C_NONE}"
  fi
}

echo -e "${C_BLUE}=== GitHub Sync: $(TZ='America/Regina' date) ===${C_NONE}"

# ---- Build repo list without 'mapfile' ----
all_git_dirs=()
for root in "${ROOTS[@]}"; do
  [ -d "$root" ] || continue
  # List .git dirs, strip '/.git', filter excludes, collect unique
  # (Uniq: we sort then skip duplicates manually for Bash 3.2 portability)
  tmp_file="$(mktemp)"
  find "$root" -type d -name .git -prune -print 2>/dev/null | sed 's/\/\.git$//' | grep -vE "${EXCLUDE_REGEX}" | sort > "$tmp_file"
  last_line=""
  while IFS= read -r line; do
    if [ "$line" != "$last_line" ]; then
      all_git_dirs+=( "$line" )
      last_line="$line"
    fi
  done < "$tmp_file"
  rm -f "$tmp_file"
done

if [ ${#all_git_dirs[@]} -eq 0 ]; then
  echo -e "${C_YELLOW}No git repositories found under configured ROOTS.${C_NONE}"
  exit 0
fi

echo -e "${C_BLUE}Found ${#all_git_dirs[@]} repositories.${C_NONE}"

# ---- Process each repo ----
for repo in "${all_git_dirs[@]}"; do
  process_repo "$repo"
done

echo # Adds a space before the final summary
if [ ${#errors[@]} -gt 0 ]; then
  echo -e "${C_RED}Completed with ${#errors[@]} issue(s):${C_NONE}"
  for e in "${errors[@]}"; do
    echo " - $e"
  done
  exit 1
else
  echo -e "${C_GREEN}All repositories synced successfully!${C_NONE}"
fi